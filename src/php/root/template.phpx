<?php
	//#==================================================================
	//# Template, Docroot
	//#------------------------------------------------------------------
	//# $Id: template.phpx,v 1.10 2022/10/09 16:46:42 jbowes Exp $
	//#------------------------------------------------------------------
	//# SET EDITOR FOR 4 space TAB stops
	//# :set autoindent tabstop=4 showmatch	 (vi)
	//#==================================================================

	require_once("./include/jbn-auth-inc.phpx");
	require_once("./include/jbn-config-inc.phpx");
	require_once("./include/jbn-looknfeel-inc.phpx");
	require_once("./include/jbn-msutils-inc.phpx");
	require_once("./include/jbn-session-inc.phpx");
	require_once("./include/jbn-journal-inc.phpx");

	//--------------------------------------------------------------------------
	// If you are not authenticated (no people_id in $_SESSION), 
	// Construct return url and redirect to login for authentication
	//--------------------------------------------------------------------------
	//
	global $JBNCFG;
	if (session_status() !== PHP_SESSION_ACTIVE) {session_start();}

	if ( ! isset ( $_SESSION['people_id'] )) {
		if (array_key_exists('QUERY_STRING', $_SERVER)){
			$param = preg_replace('/&/', '|', $_SERVER['QUERY_STRING'] );
			$returl =  $_SERVER['PHP_SELF'] . '?' .  $param;
			header("Location: $JBNCFG[BASEURL]/login.phpx?RetUrl=$returl");;
		}else{
			$returl =  $_SERVER['PHP_SELF'];
			header("Location: $JBNCFG[BASEURL]/login.phpx?RetUrl=$returl");;
		}
		exit;
	}

	//------------------------------------------------------------------------
	// Formatting and navbar options for looknfeel-inc header/footer functions
	//------------------------------------------------------------------------
	//
	$FMT = array (
		'BANNER'		=>	"Template",
		'TITLE'			=>	"Template",
		'MODULENAME'	=>	"FOO",
		'NAV1'			=>	"INFO"	// Level 1 menu navigation group
	);

	//------------------------------------------------------------------------
	// Local configuration parameters
	//------------------------------------------------------------------------
	$ZZZCFG = array (
		'EDITLEVEL'		=>	'1'			// Access level to get edit screen
	);

	//------------------------------------------------------------------------
	// Database Fields
	//------------------------------------------------------------------------
	$ALLFIELD = array(
		'jbn_id',
		'jbn_name',
		'jbn_type',
		'jbn_color',
		'last_updated'
	);

	//
	//	Fields visible in query output list
	//
	$SHOW = array(
		'jbn_id',
		'jbn_name',
		'jbn_type',
		'jbn_color'
	);

	//
	// Fields that can have query drill down links on display
	//
	$LINK = array(
		'jbn_type',
		'jbn_color'
	);
	//
	// Fields that are from a Menu Picklist that can have new members
	//
	$EXTEND = array(
		'jbn_type'
	);

	//
	// Required for New Entry
	//
	$RequiredField = array(
		'jbn_name'	=>	'enter jbn name',
		'jbn_type'	=>	'select type from list or enter new jbn type',
		'jbn_color'	=>	'select jbn color'
	);
	//
	// Global query choices
	//
	$InValidChoice = array(
		'All',
		'',
		' ',
		'None',
		'Choose'
	);
	//
	// Edit record fields with edit disabled
	//
	$NoEdit = array(
		'jbn_id',
		'last_updated'
	);

	$FieldType = array(
		'jbn_type'	=>	'Menu',
		'jbn_color'	=>	'Menu'
	);

	$BASE = "SELECT choice FROM menu WHERE table_name = 'jbn' AND ";

	$Menu = array(
		"jbn_color"		=> "$BASE field_name = 'jbn_color'",
		"jbn_type"		=> "$BASE field_name = 'jbn_type'"
	);

	//
	// Display exceptions from default tdcs centered display table cell
	//
	$JustifyCss = array(
		'jbn_name'		=>	'tds'	// small left justified
	);

	//------------------------------------------------------------------------
	// BEGIN Program
	//------------------------------------------------------------------------

	spew_header($FMT);
	if (array_key_exists('Action', $_REQUEST)) {

		echo "<PRE>\n";		// DEVONLY
		print_r($_REQUEST);	// DEVONLY
		echo "</PRE>\n";	// DEVONLY

		spew_query_form();

		//----------------------------------------------------------------------
	  	// Insert New Entry
		//----------------------------------------------------------------------
	  	if ($_REQUEST['Action'] == "Insert New Entry" ) {
			$dbh = jbn_pdo_connect();
			//
			// Get list of fields for this table
			//
			$fieldlabel = get_field_labels('jbn','jbn',$JBNCFG['DBNAME']);
			$fields = array_keys($fieldlabel);

			//
			// Define default values
			//
			$Default = array (
				'jbn_state'	 =>  'New'
			);


			//
			// Setup default values
			//
			foreach ($Default as $key => $val ) {
				if ( ! isset ( $_REQUEST[$key]) ) {
					$_REQUEST[$key] = $val;
					echo "<BR>Setting default of $key to $val\n";	// DEVONLY
				}
			}

			//
			// Eliminate all keys that have invalid answers
			// Overwrite open menu entries with NEW_.. entries
			//
			foreach ($fields as $f) {
				$altkey = "NEW_" . $f;

				if ( isset($_REQUEST[$altkey]) ) {
					if (!in_array($_REQUEST[$altkey], $InValidChoice)) {
						$_REQUEST[$f] = $_REQUEST[$altkey];
						unset ($_REQUEST[$altkey]);
					}
				}

				if (in_array($_REQUEST[$f], $InValidChoice)) {
					unset ($_REQUEST[$f]);
				}

			}

			//
			// Delete auto_increment primary keys
			//
			unset ($_REQUEST['jbn_id']);

			//
			// Required fields gauntlet
			//
			foreach ( $RequiredField as $key => $val) {
				if (! array_key_exists($key, $_REQUEST)) {
					$err .= '<LI>Please ' . $RequiredField[$key] . '.</LI>';
				}
			}

			if ( $err ) {

				echo "<CENTER>\n";
				echo "<H3>Incomplete Information</H3>\n";
				echo "<TABLE BORDER>\n";
				echo "<TR><TD><UL>$err</UL></TD></TABLE>\n";
				echo "</TABLE>\n";
				echo "</CENTER>\n";
				spew_footer($FMT);
				exit;
			}

			$sql = 'INSERT INTO jbn (';

			$Data = array();

			foreach ( $fields as $f) {
				if ( array_key_exists($f, $_REQUEST)) {
					if (!in_array($_REQUEST[$f], $InValidChoice)) {
						$Data[$f] = $dbh->quote($_REQUEST[$f]);
					}
				}
			}

			$sql .= implode(', ', array_keys($Data) );
			$sql .= ") VALUES (";
			$sql .= implode(', ', array_values($Data) );
			$sql .= ")";

			echo "<P class=trace>$sql</P>\n"; 	// DEVONLY

			$dbh->query($sql);
			$_REQUEST['jbn_id'] = $jbn_id = $dbh->lastInsertId() ;
			echo "<P class=trace>JBN ID: $jbn_id</P>\n"; 	// DEVONLY
           	$_REQUEST['Action'] = 'View';

			if ( isset ($jbn_id) ) {
				echo "<H2>JBN record created</H2>\n";
			}else{
				die("Failed to create JBN record in database\n");
			}
           	echo "<P class=trace>Returned JBN ID of $jbn_id\n";    // DEVONLY


			echo "<CENTER>\n";
			echo "<H2>Record successfully added</H2>\n";
			echo "</CENTER>\n";
		}

		//----------------------------------------------------------------------
	  	// Update Existing Entry 
		//----------------------------------------------------------------------
	  	if ($_REQUEST['Action'] == "Update" ) {

			if ( array_key_exists('jbn_id', $_REQUEST)) {
				$jbn_id = $_REQUEST['jbn_id'];
				if (! is_numeric( $jbn_id ) ) {
					die ("ERROR: Attempt to update Hdc requires jbn_id to be integer. It is not.");
				}
			}else{
				die ("No Hdc Id Set") ;
			}

			$dbh = jbn_pdo_connect();

			//
			// Get Original Record
			//
			$Original = array();
			$sql = "SELECT * FROM jbn WHERE jbn_id = '$jbn_id'";
			$result = $dbh->query($sql);

			$Original = $result->fetch(PDO::FETCH_ASSOC);


			//
			// Get list of fields for this table
			//
			$fieldlabel = get_field_labels('jbn','aaaaaaaaaa',$JBNCFG['DBNAME']);

			print '<pre>';						// DEBUG DEVONLY
			echo "Incoming Updated Fields\n";   // DEBUG DEVONLY
			print htmlspecialchars(print_r($fieldlabel), ENT_QUOTES);	// DEBUG DEVONLY
			print '</pre>';						// DEBUG DEVONLY

			$fields = array_keys($fieldlabel);

			//
			// Eliminate all keys that have invalid answers
			// Overwrite entries with NEW_... entries for Open Menus
			//
			foreach ($fields as $f) {
				$altkey = "NEW_" . $f;
				if (isset($_REQUEST[$altkey])) {
					if (in_array($_REQUEST[$altkey], $InValidChoice)) {
						$_REQUEST[$f] =  $_REQUEST[$altkey];
						unset ($_REQUEST[$altkey]);
					}
				}
				if (in_array($_REQUEST[$f], $InValidChoice)) {
					unset ($_REQUEST[$f]);
				}
			}

			//
			// Update only the fields that have changed
			//
			$sql = 'UPDATE jbn SET ';
			$sqlentry = array ();
			foreach ($fields as $f) {
				if ( array_key_exists($f, $_REQUEST)) {
					$val = $_REQUEST[$f];

					if ( $_REQUEST[$f] != $Original[$f] ) {
						$val = $dbh->quote($_REQUEST[$f]);
						$sqlentry[] = $f . " = " . $val ;
					}
				}
			}

			if (count($sqlentry) > 0){
				$sql .= implode (', ', $sqlentry);
				$sql .= " WHERE jbn_id = '$jbn_id'";

				echo "<p class=trace>$sql</p>\n";	// DEVONLY DEBUG

				$result = $dbh->query($sql);
				echo "<H3>Update successful</H3>\n";
			}else{
				echo "<H3>No Changes Made</H3>\n";
			}

			$_REQUEST['jbn_id'] = $jbn_id;
			$_REQUEST['Action'] = "View";
		}

		//----------------------------------------------------------------------
	  	// Query or List
		//----------------------------------------------------------------------
	  	if ($_REQUEST['Action'] == "Query"
	  		|| $_REQUEST['Action'] == "List" ) {

			echo "<PRE>\n";		// DEBUG DEVONLY
			print_r($_SESSION);	// DEBUG DEVONLY
			echo "</PRE>\n";	// DEBUG DEVONLY

			$dbh = jbn_pdo_connect();
			$fieldlabel = array();

			$fieldlabel = get_field_labels('jbn','jbn',$JBNCFG['DBNAME']);
			$fields = array_keys($fieldlabel);

			//----------------------------------------------------------
			// Capture previous selection criteria and append to links
			// To enable drill down subqueries
			//----------------------------------------------------------

			foreach(explode( '&', $_SERVER['QUERY_STRING'])  as $entry ) {
				list($key, $val) = explode( '=', $entry);	

				if ( ! empty( $val ) ) {
					if (! in_array($val, $InValidChoice)) {
						if (in_array($key, $ALLFIELD) ) {
							$parameters[$key] = $val;
						}
					}
				}
			}
			$parameters['Action'] = $_REQUEST['Action'];

			//----------------------------------------------------------
			// Uniquify for duplicate entries
			//----------------------------------------------------------
			$validentries = array();

			foreach ($parameters as $key => $val ) {
				$val = preg_replace('/\s+/', '+', $val);
				$validentries[] = $key . '=' . $val;
			}

			if (count($validentries)) {
				$drilldown = implode('&', $validentries);
			}

			//
			// Base sql query
			//
			$What = array(
				'z.*'
			);

			$Where = array(
			);

			$From = array(
				'jbn'	=>	'z'
			);

			//
			// Construct where clause into an array
			//
			foreach ($fields as $f) {
				if (array_key_exists($f, $_REQUEST)) { 
					$val = $_REQUEST[$f];

					if (in_array( $val, $InValidChoice ) ){
						unset($val) ;
                    }else{
					    $val = $dbh->quote( $_REQUEST[$f] );
						if ( preg_match('/%/', $val)) { 
							$Where[] = "z." . $f . " LIKE " . $val ;
						}else{
							$Where[] = "z." . $f . "=" . $val ;
						}
					}
				}
			}

			$sql = "SELECT DISTINCT " . implode(',', $What);

			$Fromsql = array();

			foreach ($From as $table => $abbr) {
				$Fromsql[] = $table . ' ' . $abbr;
			}
			$Fromsql = array_unique($Fromsql);

			$sql .= ' FROM ' . implode(', ', $Fromsql);

			if ( count($Where) ) {
				$sql .= ' WHERE ' . implode(' AND ', $Where);
			}

			//---------------------------------------------------
			// ORDER BY
			//---------------------------------------------------
			$OrderBy = array(
				'Name'		=>	'z.jbn_name',
				'Color'		=>	'z.jbn_color, z.jbn_name',
				'Type'		=>	'z.jbn_type, z.jbn_name'
			);

			$sortby = $_REQUEST['Sortmeby'];
			$sby = $OrderBy[$sortby];

			if (empty ($sby)){
				$sql .= ' ORDER BY z.jbn_name';
			}else{
				$sql .= ' ORDER BY ' . $sby;
			}

			echo "<P class=trace>$sql</P>\n";	// DEVONLY
			$result = $dbh->query($sql);
			$rowcount = $result->rowCount();

			// Blurb
			echo "<P class=trace>\n";
			echo "Column entries that are links will &quot;drill down&quot; to refine your query.\n";
			echo "<BR>Query returned $rowcount " . ( $rowcount ==1 ? 'entry.' : 'entries.');
			echo "</P>\n";

			//---------------------------------------------------
			// Spew table
			//---------------------------------------------------
			echo "<CENTER>\n";
			echo "<TABLE BORDER>\n";

			if ($_SESSION['access_level'] >= $ZZZCFG['EDITLEVEL'] ) {
				echo "<TH class=ths>Edit</TH>\n";		// SECURITY
			}

			echo "<TH class=ths>View</TH>\n";

			foreach ($ALLFIELD as $f) {
				if (in_array($f, $SHOW)) {
					echo "<TH class=ths>$fieldlabel[$f]</TH>\n";
				}
			}

			while ($row = $result->fetch(PDO::FETCH_ASSOC)){
				echo "<TR>\n";

				// Edit if authorized
				// SECURITY
				if ($_SESSION['access_level'] >= $ZZZCFG['EDITLEVEL'] ) {	
					echo "<TD ALIGN=CENTER VALIGN=TOP class=tdcs>";
					echo "<A HREF=$_SERVER[PHP_SELF]?jbn_id=$row[jbn_id]";
					echo "&Action=Edit>";
					echo "<IMG SRC=/images/smallballs/greenball.gif BORDER=0></A>";
					echo "</TD>\n";
				}
	
				// View for everyone
				echo "<TD ALIGN=CENTER VALIGN=TOP class=tdcs>";
					echo "<A HREF=$_SERVER[PHP_SELF]?jbn_id=$row[jbn_id]";
					echo "&Action=View>";
					echo "<IMG SRC=/images/smallballs/yellowball.gif BORDER=0></A>";
				echo "</TD>\n";
	
				foreach ($ALLFIELD as $f) {
					$css = "tdcs";
					$display = stripslashes($row[$f]); 

					//
					// Display Exceptions (lookup)
					//
					//if ( $f  == 'jbn_id' ) {
						//$display = $row[jbn_name];
					//}

					if (in_array($f, $SHOW)) {

						if (array_key_exists($f, $JustifyCss)) {
							$css = $JustifyCss[$f];
						}

						echo "<TD VALIGN=TOP class=$css>";
						if (in_array($f, $LINK)) {
							echo "<A HREF=";
							echo "$_SERVER[PHP_SELF]";
							echo '?';
							$url = preg_replace('/\s+/', '+', $row[$f]);
							echo "$f=${url}"; 
							echo "&${drilldown}>";
							echo "$display</A>\n";
						}else{
							echo "$display\n";
						}
						echo "<BR></TD>\n";
					}
				}
			}
			echo "</TABLE>\n";
			echo "</CENTER>\n";
	  	}//if ($_REQUEST['Action'] == "List"))  or 'Query'

		//----------------------------------------------------------------------
	  	// New Entry Form
		//----------------------------------------------------------------------
	  	if ($_REQUEST['Action'] == "New" ) {
			$menulist = array();
			$table = 'jbn';

			$dbh = jbn_pdo_connect();
			//
			// People Rosterselect 
			//
			$People = array();
			$PeopleEmail = array();
			$sql = "SELECT people_id, first_name, last_name, email_1, full_name from people";

			// TODO: limit scope: $sql .= " WHERE ....";
			//$sql .= " WHERE organization_id = $_SESSION['organization_id'] ";

			$result = $dbh->query($sql);

			while ($row = $result->fetch(PDO::FETCH_ASSOC)){
				$people_id = $row['people_id'];
				$People[$people_id] = $row['first_name'] . " " . $row['last_name'];
				//$People[$people_id] = $row['full_name']; 
				$PeopleEmail[$people_id] = $row['email_1'];
			}

			// Blurb
			echo "<P class=trace>\n";
			echo "Enter entries. Details on meanings and choice details available via help links in left column.\n";
			echo "Asterisk (*)  indicates field is required.\n";
			echo "</P>\n";

			echo "<CENTER>\n";
			echo "<FORM ACTION=$_SERVER[PHP_SELF] TYPE=POST>\n";
			echo "<TABLE BORDER>\n";

			$fieldlabel = get_field_labels('jbn','jbn',$JBNCFG['DBNAME']);


			foreach ($ALLFIELD as $fieldname ) {
			    if ( $fieldname == 'jbn_id'){
                    continue;
                }
				$val = $fieldlabel[$fieldname];
				
				echo "<TR>\n";

                echo "<TD CLASS=tdls>";
				echo "<A HREF=/help.phpx?table_name=$table&field_name=$fieldname&Action=Help>";
				echo "$val</A>";
				if ( isset($RequiredField[$fieldname]) ){
					echo '&nbsp;*&nbsp;';
				}
				echo "</TD>\n";

				echo "<TD class=tds>";

				if (array_key_exists($fieldname, $FieldType)) {
					if ( $FieldType[$fieldname] == "Menu" ) {
						$menusql = $Menu[$fieldname];
						$menulist = get_menu($menusql);
						sort($menulist);
						spew_select_menu($fieldname, $_REQUEST[$fieldname],'',$menulist);
						if (in_array($fieldname, $EXTEND)) {
							echo "-OR- <INPUT TYPE=TEXT NAME=NEW_${fieldname}>";
						}
					}

					if ($FieldType[$fieldname] == "MenuArray" ) {
						$menusql = $Menu[$fieldname];
						$menulist = get_menu_array($menusql);
						asort($menulist);
						spew_select_hash_menu($fieldname, $_REQUEST[$fieldname],'',$menulist);
					}

					if ($FieldType[$fieldname] == "TextArea" ) {
						echo "<TEXTAREA COLS=70 ROWS=20 NAME=$fieldname></TEXTAREA>\n";
					}

					if ($FieldType[$fieldname] == "LongText" ) {
						echo "<INPUT TYPE=TEXT SIZE=70 NAME=$fieldname>";
					}

					if ($FieldType[$fieldname] == "People" ) {
						spew_select_menu($fieldname, $_REQUEST[$fieldname],'',$People);
					}

				}else{
					echo "<INPUT TYPE=TEXT NAME=$fieldname>";
				}
				echo "</TD>\n";
			}
			echo "</TABLE>\n";
			echo "<INPUT TYPE=SUBMIT NAME=Action VALUE=\"Insert New Entry\">\n";
			echo "</FORM>\n";
			echo "</CENTER>\n";
		}//End if ($_REQUEST['Action'] == "New" ) 

		//----------------------------------------------------------------------
	  	// Edit 
		//----------------------------------------------------------------------
	  	if ($_REQUEST['Action'] == "Edit") {

			$table='jbn';

			if ( array_key_exists('jbn_id', $_REQUEST)) {
				if ( isset($_REQUEST['jbn_id'] ) ) {
					$jbn_id = stripslashes( $_REQUEST['jbn_id']);
				}else{
					die ("NO Hdc ID in edit function.") ;
				}
				if ( ! is_numeric($jbn_id) ) {
					die ("Hdc ID ($jbn_id) is not an integer.") ;
				}
			}else{
				die ("No Hdc Id Set") ;
			}

			$dbh = jbn_pdo_connect();

			//
			// People Rosterselect 
			//
			$People = array();
			$PeopleEmail = array();
			$sql = "SELECT people_id, first_name, last_name, email_1, full_name from people";
			// TODO: limit scope: $sql .= " WHERE ....";
			$result = $dbh->query($sql);
			while ($row = $result->fetch(PDO::FETCH_ASSOC)){
				$pid = $row['people_id'];
				$People[$pid] = $row['first_name'] . " " . $row['last_name'];
				//$People[$pid] = $row['full_name'];
				$PeopleEmail[$pid] = $row['email_1'];
			}


			$menulist = array();

			$sql = "SELECT * FROM jbn WHERE jbn_id = '$jbn_id'";
			$result = $dbh->query($sql);
			$row = $result->fetch(PDO::FETCH_ASSOC);

			$fieldlabel = get_field_labels('jbn','jbn',$JBNCFG['DBNAME']);

			// Blurb
			echo "<P class=trace>\n";
			echo "Change desired entries and click <B>Update</B> at bottom of form.\n";
			echo "</P>\n";


			echo "<CENTER>\n";
			echo "<FORM ACTION=$_SERVER[PHP_SELF] TYPE=POST>\n";
			echo "<TABLE BORDER>\n";

			foreach ($ALLFIELD as $fieldname ) {
				$label = $fieldlabel[$fieldname];
				echo "<TR><TD VALIGN=TOP class=tdls>";
				echo "<A HREF=/help.phpx?table_name=jbn&field_name=$fieldname&Action=Help>";
				echo "$label";
				echo "</A>";
				echo "</TD>\n";
				echo "<TD VALIGN=TOP class=tds>";

				if (in_array($fieldname, $NoEdit)) {
					echo "$row[$fieldname]<BR>";
				}else{
					if (array_key_exists($fieldname, $FieldType)) {

						if ( $FieldType[$fieldname] == "Menu" ) {
							$menusql = $Menu[$fieldname];
							$menulist = get_menu($menusql);
							spew_select_menu($fieldname, $row[$fieldname],'',$menulist);
							if (in_array($fieldname, $EXTEND)) {
								echo "-OR- <INPUT TYPE=TEXT NAME=NEW_${fieldname}>";
							}
						}

						if ($FieldType[$fieldname] == "MenuArray" ) {
							$menusql = $Menu[$fieldname];
							$menulist = get_menu_array($menusql);
							spew_select_hash_menu($fieldname, $row[$fieldname],'',$menulist);
						}

						if ($FieldType[$fieldname] == "People" ) {
							spew_select_menu($fieldname, $_REQUEST[$fieldname],'',$People);
						}

						if ( $FieldType[$fieldname] == "TextArea" ) {
							echo "<TEXTAREA NAME=$fieldname COLS=70 ROWS=20>$row[$fieldname]</TEXTAREA>\n";
						}

						if ( $FieldType[$fieldname] == "LongText" ) {
							echo "<INPUT TYPE=TEXT NAME=$fieldname SIZE=70 VALUE=\"$row[$fieldname]\">\n";
						}

					}else{	// No fieldtype
						echo "<INPUT TYPE=TEXT NAME=$fieldname VALUE=\"$row[$fieldname]\"><BR>";
					}
						
				}//Endif NoEdit
				echo "</TD>\n";
			}//Endforeach fieldname
			echo "</TABLE>\n";
			echo "<INPUT TYPE=HIDDEN NAME=jbn_id VALUE=$_REQUEST[jbn_id]>\n";
			// SECURITY
			if ( $_SESSION['access_level'] >= $ZZZCFG['EDITLEVEL'] ) {
				echo "<INPUT TYPE=SUBMIT NAME=Action VALUE=Update>\n";
			}
			echo "</FORM>\n";
			echo "</CENTER>\n";

			show_journal_history($jbn_id, $jbn);

	  	}//if ($_REQUEST['Action'] == "Edit") 


		//----------------------------------------------------------------------
	  	// View
		//----------------------------------------------------------------------
	  	if ($_REQUEST['Action'] == "View"
	  		|| $_REQUEST['Action'] == "View Details" ) {

			$table = 'jbn';

			if ( array_key_exists('jbn_id', $_REQUEST)) {
				if ( isset ( $_REQUEST['jbn_id'] ) ) {
					$jbn_id = $_REQUEST['jbn_id'];
				}else{
					die ("No Hdc ID in view function") ;
				}
				if ( ! is_numeric($jbn_id) ) {
					die ("Hdc ID ($jbn_id) is not an integer.") ;
				}
			}else{
				die ("No Hdc Id Set") ;
			}

			$menulist = array();
			$row = array();

			$dbh = jbn_pdo_connect();

			$sql = "SELECT * FROM jbn WHERE jbn_id = '$jbn_id'";

			$result = $dbh->query($sql);
			$row = $result->fetch(PDO::FETCH_ASSOC);

			$fieldlabel = get_field_labels('jbn','jbn',$JBNCFG['DBNAME']);

			// Blurb
			echo "<P class=trace>\n";
			echo "Field explanation available via link in left column field labels.\n";
			echo "</P>\n";

			echo "<CENTER>\n";
			echo "<H2>$row[jbn_name]</H2>\n";
			echo "<FORM ACTION=$_SERVER[PHP_SELF] TYPE=POST>\n";
			echo "<TABLE BORDER>\n";

			foreach ($ALLFIELD as $fieldname ) {
				$label = $fieldlabel[$fieldname];
				echo "<TR>\n";
				echo "<TD class=tdls>";
				echo "<A HREF=/help.phpx?table_name=$table&field_name=$fieldname&Action=Help>";
				echo "$label</A></TD>\n";
				echo "<TD class=tds>";

				$display = stripslashes($row[$fieldname]);

				//
				// View Entry Lookup Map Translations (id -> othertable.name for foreign keys)
				//
				//if ( $fieldname == "jbn_id" ) {
					//$sql = "SELECT jbn_name from othertable where jbn_id = '$row[$fieldname]'";
					//$display = get_value($sql);
				//}

				echo "$display<BR>";
				echo "</TD>\n";
			}//Endforeach fieldname
			echo "</TABLE>\n";
			echo "<INPUT TYPE=SUBMIT NAME=Action VALUE=List>\n";
			echo "</FORM>\n";

			//
			// Show Journal History
			//
			echo "<FORM ACTION=/journal.phpx TYPE=POST>\n";
			echo "<INPUT TYPE=HIDDEN NAME=source_id VALUE=$jbn_id>\n";
			echo "<INPUT TYPE=HIDDEN NAME=source_table VALUE=$table>\n";
			echo "<INPUT TYPE=HIDDEN NAME=journal_type VALUE=Note>\n";
			if ( $_SESSION['access_level'] >= $ZZZCFG['EDITLEVEL'] ) {
				echo "<INPUT TYPE=SUBMIT NAME=Action VALUE=\"Edit\">\n";
			}
			echo "<INPUT TYPE=SUBMIT NAME=Action VALUE=\"Add Journal\">\n";
			echo "</FORM>\n";

			show_journal_history($jbn_id, 'jbn');

			echo "</CENTER>\n";
	  	}//if ($_REQUEST['Action'] == "View")

		//----------------------------------------------------------------------
		// END 'Action' Processing Options
		//----------------------------------------------------------------------

	}else{	// No Action Field
		spew_query_form();
	}

	spew_footer($FMT);
	//----------------------------------------------------------------
	// Function spew_autocomplete_form for ajax lookup of color
	// http://phppot.com/jquery/jquery-ajax-autocomplete-country-example/
	//----------------------------------------------------------------
	function spew_autocomplete_form() {
		global $JBNCFG;
        $list = array();

		echo "<div class=frmSearch>\n";
			echo "<input type=text id=search-box placeholder=Color />\n";
			echo "<div id=suggesstion-box></div>\n";
		echo "</div>\n";
	}

	//----------------------------------------------------------------
	// Function spew_query_form
	//----------------------------------------------------------------
	function spew_query_form() {
		global $JBNCFG;
        $list = array();
		$dbh = jbn_pdo_connect();

		echo "<P class=trace>";
		echo "Help and explanations available at ";
		echo "<A HREF=$JBNCFG[BASEURL]/help.phpx?table_name=jbn&field_name=Overview&Action=Help>Overview</A>.";
		echo "</P>\n";

		echo "<CENTER>\n";
		echo "<FORM ACTION=$_SERVER[PHP_SELF] TYPE=POST>\n";
		echo "<TABLE BORDER>\n";
		echo "<TH class=ths>Name</TH>\n";
		echo "<TH class=ths>Type</TH>\n";
		echo "<TH class=ths>Owner</TH>\n";
		echo "<TH class=ths>Sort By</TH>\n";

		echo "<TR>\n";

		// Name
		echo "<TD class=tds>\n";
		$sql = "SELECT DISTINCT jbn_name from jbn order by jbn_name";
		$list = get_menu($sql);
		spew_select_menu('jbn_name','','All',$list);
		echo "</TD>\n";

		// Type 
		echo "<TD class=tds>\n";
		$sql = "SELECT distinct jbn_type from  jbn order by jbn_type" ;
		$list = get_menu($sql);
		spew_select_menu('jbn_type','All','All',$list);
		echo "</TD>\n";

		// owner
		echo "<TD class=tds>\n";
		$sql = "SELECT people_id, full_name from people order by last_name, first_name";
		$list = get_menu_array($sql);
		$list['All'] = 'All';
		spew_select_hash_menu('people_id','All','All',$list);
		echo "</TD>\n";

		// Sort By
		echo "<TD class=tds>\n";
		$sortby = array (
			'Name',
			'Owner',
			'Type'
			);
		sort($sortby);
		spew_select_menu('Sortmeby','','Type',$sortby);
		echo "</TD>\n";

		// End Table

		echo "</TR>\n";
		echo "</TABLE>\n";

		// End Form
		echo "<INPUT TYPE=SUBMIT NAME=Action VALUE=List>\n";

		// SECURITY
		if ($_SESSION['access_level'] >= $ZZZCFG['EDITLEVEL'] ) {
			echo "<INPUT TYPE=SUBMIT NAME=Action VALUE=\"New\">\n";
		}
		echo "</FORM>\n";

		$Photo = array();
		$Photo = scandir($JBNCFG['HEADSHOTDIR']);
		echo "<UL>";
		foreach ($Photo as $p){
			echo "<LI>$p</LI>\n";
		}
		echo "</UL>";



		echo "</CENTER>\n";
	}

	//----------------------------------------------------------------
	// Function send_email_ack
	//----------------------------------------------------------------
	function send_email_ack ( array $Data ) {
		global $JBNCFG;
		//
		// Config parameters for email acknowledgement
		//
		$LOGINEMAIL = array (
			'subject'		=>	"ZORGZ Autobot", 
			'fromemail'		=>	"prodops@anchorfree.com",
			'toemail'		=>	"jbowes@anchorfree.com",	// Safety, overwritten in send_email_ack
			'fromname'		=>	"ZORGZ Ops Admin" 
		);

		if ( $Data['email_1'] ) {
			$LOGINEMAIL['toemail'] = $Data['email_1'];
			echo "<CENTER>\n";
			echo "<H2>The info has been emailed to $Data[email_1]</H2>\n";
			echo "</CENTER>\n";
		}

		echo '<pre>';	//DEBUG DEVONLY
		echo "ENTERING EMAIL ACK<BR>\n";//DEBUG DEVONLY
		echo "LOGINEMAIL<BR>\n";//DEBUG DEVONLY
		echo htmlspecialchars(print_r($LOGINEMAIL), ENT_QUOTES);	//DEBUG DEVONLY
		echo "Incoming Data<BR>\n";//DEBUG DEVONLY
		echo htmlspecialchars(print_r($Data), ENT_QUOTES);	//DEBUG DEVONLY
		echo '</pre>';	//DEBUG DEVONLY

		$fd = popen($JBNCFG[MAILER],"w"); 
		//
		// Construct Mail Headers
		//
		fputs($fd, "From: $LOGINEMAIL[fromname] <$LOGINEMAIL[fromemail]>\n"); 
		fputs($fd, "To: $LOGINEMAIL[toname] <$LOGINEMAIL[toemail]>\n"); 

		if ( $Data[email_2] ) {
			fputs($fd, "Cc: $Data[email_2]\n"); 
			echo "<CENTER>\n";
			echo "<H2>A copy has also been sent to your alternate email $Data[email_2]</H2>\n";
			echo "</CENTER>\n";
		}
		//
		// Subject
		//
		fputs($fd, "Subject: $LOGINEMAIL[subject]\n\n"); 
		//
		// Body
		//
		fputs($fd, "Your issue has been resolved. Below is more information.\n\n"); 
		fputs($fd, "Click on the following link to log in and reset your password\n\n");
		fputs($fd, "$JBNCFG[BASEURL]\n\n");
		fputs($fd, "Do not reply to this email.\n");

		pclose($fd); 
	}//End function send_email_ack

	//----------------------------------------------------------------
	// END FUNCTIONS
	//----------------------------------------------------------------
		
?>
